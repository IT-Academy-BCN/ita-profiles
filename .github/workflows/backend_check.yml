name: backend_check

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  check-pr-up-to-date:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Ensure PR is up to date with main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Enhanced logging
          set -x

          # Only run for pull requests
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "INFO: This is not a pull request, skipping verification"
            exit 0
          fi

          # Get pull request information
          PR_NUMBER=${{ github.event.pull_request.number }}
          BASE_BRANCH=${{ github.base_ref }}
          HEAD_BRANCH=${{ github.head_ref }}

          # Validate inputs
          if [[ -z "$PR_NUMBER" || -z "$BASE_BRANCH" || -z "$HEAD_BRANCH" ]]; then
            echo "ERROR: Missing required GitHub context variables"
            exit 1
          fi

          # Check if the target branch is main
          if [[ "$BASE_BRANCH" != "main" ]]; then
            echo "INFO: Pull request is not targeting main, skipping verification"
            exit 0
          fi

          # Verbose git operations
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
          # Get the latest commit hash of main
          MAIN_LATEST_COMMIT=$(git ls-remote origin main | cut -f1)
          
          # Get the base commit of the pull request
          PR_BASE_COMMIT=$(git merge-base origin/main origin/$HEAD_BRANCH)

          # Additional debug information
          echo "Main Latest Commit: $MAIN_LATEST_COMMIT"
          echo "PR Base Commit: $PR_BASE_COMMIT"

          # Compare hashes to verify if up to date
          if [[ "$MAIN_LATEST_COMMIT" != "$PR_BASE_COMMIT" ]]; then
            echo "::error::üö® Pull Request is NOT up to date with the main branch."
            echo "::error::Please update your branch by rebasing or merging with main."
            echo "Detailed update steps:"
            echo "1. git fetch origin main"
            echo "2. git checkout $HEAD_BRANCH"
            echo "3. git rebase origin/main"
            echo "4. git push -f origin $HEAD_BRANCH"
            exit 1
          else
            echo "‚úÖ Pull Request is up to date with the main branch."
          fi

  pr_check:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.5
        ports:
          - "3306:3306"
        env:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: laravel
          MARIADB_USER: user
          MARIADB_PASSWORD: password

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - name: Preparar configuraci√≥n de Redis
        run: |
          mkdir -p /tmp/redis-data
          cp ./docker/redis/.conf/redis.conf /tmp/redis.conf
          docker run -d --name redis-server -p 6379:6379 -v /tmp/redis.conf:/usr/local/etc/redis/redis.conf -v /tmp/redis-data:/data redis:latest redis-server /usr/local/etc/redis/redis.conf

      - name: Instalar dependencias
        run: composer install

      - name: Configurar .env para pruebas
        run: |
          echo "APP_KEY=" >> .env
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=mariadb" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel" >> .env
          echo "DB_USERNAME=user" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "KEY_HASH_MAC=token_password" >> .env
          echo "REDIS_CLIENT=predis" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PASSWORD=password" >> .env

      - name: Generar clave de aplicaci√≥n
        run: php artisan key:generate

      - name: Ejecutar migraciones y seeds
        run: php artisan migrate --seed

      - name: Inicializar passport
        run: php artisan passport:install

      - name: Instalar PHPUnit
        run: composer require --dev phpunit/phpunit

      - name: Ejecutar PHPUnit
        run: php artisan test

